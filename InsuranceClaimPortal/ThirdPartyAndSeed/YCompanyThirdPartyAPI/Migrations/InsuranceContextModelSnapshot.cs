// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using YCompanyPaymentsAPI.Data;

#nullable disable

namespace YCompanyThirdPartyAPI.Migrations
{
    [DbContext(typeof(InsuranceContext))]
    partial class InsuranceContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("YCompanyPaymentsAPI.Models.Coverage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CoverageGroup")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CoverageName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsPolicyCoverage")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVehicleCoverage")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Coverage");
                });

            modelBuilder.Entity("YCompanyPaymentsAPI.Models.Driver", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DoB")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmailAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsPrimaryPolicyHolder")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LicenseIssuedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LicenseIssuedState")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LicenseNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PolicyId")
                        .HasColumnType("int");

                    b.Property<string>("RelationWithPrimaryPolicyHolder")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PolicyId");

                    b.ToTable("Driver");
                });

            modelBuilder.Entity("YCompanyPaymentsAPI.Models.Policy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("AdditionalInfo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PaymentOption")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PolicyEffectiveDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("PolicyExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PolicyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PolicyNumber")
                        .HasColumnType("int");

                    b.Property<double>("TotalAmount")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("Policies");
                });

            modelBuilder.Entity("YCompanyPaymentsAPI.Models.Policy_Coverage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<int>("CoverageId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("PolicyId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CoverageId");

                    b.HasIndex("PolicyId");

                    b.ToTable("Policy_Coverage");
                });

            modelBuilder.Entity("YCompanyPaymentsAPI.Models.Vehicle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Color")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Model")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PolicyId")
                        .HasColumnType("int");

                    b.Property<string>("VehicleNumberPlate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VehicleYear")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PolicyId")
                        .IsUnique();

                    b.ToTable("Vehicles");
                });

            modelBuilder.Entity("YCompanyPaymentsAPI.Models.Vehicle_Coverage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<int>("CoverageId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("VehicleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CoverageId");

                    b.HasIndex("VehicleId");

                    b.ToTable("Vehicle_Coverage");
                });

            modelBuilder.Entity("YCompanyThirdPartyAPI.Models.Vehicle_Driver", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DriveForBusiness")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DriverId")
                        .HasColumnType("int");

                    b.Property<float>("EverydayMileage")
                        .HasColumnType("real");

                    b.Property<bool>("IsPrimaryDriver")
                        .HasColumnType("bit");

                    b.Property<int>("VehicleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DriverId");

                    b.HasIndex("VehicleId");

                    b.ToTable("Vehicle_Driver");
                });

            modelBuilder.Entity("YCompanyPaymentsAPI.Models.Driver", b =>
                {
                    b.HasOne("YCompanyPaymentsAPI.Models.Policy", "Policy")
                        .WithMany("Drivers")
                        .HasForeignKey("PolicyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Policy");
                });

            modelBuilder.Entity("YCompanyPaymentsAPI.Models.Policy_Coverage", b =>
                {
                    b.HasOne("YCompanyPaymentsAPI.Models.Coverage", "Coverage")
                        .WithMany("PolicyCoverages")
                        .HasForeignKey("CoverageId")
                        .IsRequired();

                    b.HasOne("YCompanyPaymentsAPI.Models.Policy", "Policy")
                        .WithMany("PolicyCoverages")
                        .HasForeignKey("PolicyId")
                        .IsRequired();

                    b.Navigation("Coverage");

                    b.Navigation("Policy");
                });

            modelBuilder.Entity("YCompanyPaymentsAPI.Models.Vehicle", b =>
                {
                    b.HasOne("YCompanyPaymentsAPI.Models.Policy", "Policy")
                        .WithOne("Vehicle")
                        .HasForeignKey("YCompanyPaymentsAPI.Models.Vehicle", "PolicyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Policy");
                });

            modelBuilder.Entity("YCompanyPaymentsAPI.Models.Vehicle_Coverage", b =>
                {
                    b.HasOne("YCompanyPaymentsAPI.Models.Coverage", "Coverage")
                        .WithMany("VehicleCoverages")
                        .HasForeignKey("CoverageId")
                        .IsRequired();

                    b.HasOne("YCompanyPaymentsAPI.Models.Vehicle", "Vehicle")
                        .WithMany("VehicleCoverages")
                        .HasForeignKey("VehicleId")
                        .IsRequired();

                    b.Navigation("Coverage");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("YCompanyThirdPartyAPI.Models.Vehicle_Driver", b =>
                {
                    b.HasOne("YCompanyPaymentsAPI.Models.Driver", "Driver")
                        .WithMany("VehicleDrivers")
                        .HasForeignKey("DriverId")
                        .IsRequired();

                    b.HasOne("YCompanyPaymentsAPI.Models.Vehicle", "Vehicle")
                        .WithMany("VehicleDrivers")
                        .HasForeignKey("VehicleId")
                        .IsRequired();

                    b.Navigation("Driver");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("YCompanyPaymentsAPI.Models.Coverage", b =>
                {
                    b.Navigation("PolicyCoverages");

                    b.Navigation("VehicleCoverages");
                });

            modelBuilder.Entity("YCompanyPaymentsAPI.Models.Driver", b =>
                {
                    b.Navigation("VehicleDrivers");
                });

            modelBuilder.Entity("YCompanyPaymentsAPI.Models.Policy", b =>
                {
                    b.Navigation("Drivers");

                    b.Navigation("PolicyCoverages");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("YCompanyPaymentsAPI.Models.Vehicle", b =>
                {
                    b.Navigation("VehicleCoverages");

                    b.Navigation("VehicleDrivers");
                });
#pragma warning restore 612, 618
        }
    }
}
